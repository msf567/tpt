#include "music/music.h"
#include <unordered_map>

#include <vector>
#include <cmath>

namespace NOTE {
	bool enabled = true;
	const std::unordered_map<int, float> key_map({
		{ 108, 7902.133f },
		{ 107, 7458.620f },
		{ 106, 7040.000f },
		{ 105, 6644.875f },
		{ 104, 6271.927f },
		{ 103, 5919.911f },
		{ 102, 5587.652f },
		{ 101, 5274.041f },
		{ 100, 4978.032f },
		{ 99, 4698.636f },
		{ 98, 4434.922f },
		{ 88, 4186.009f },
		{ 87, 3951.066f },
		{ 86, 3729.310f },
		{ 85, 3520.000f },
		{ 84, 3322.438f },
		{ 83, 3135.963f },
		{ 82, 2959.955f },
		{ 81, 2793.826f },
		{ 80, 2637.020f },
		{ 79, 2489.016f },
		{ 78, 2349.318f },
		{ 77, 2217.461f },
		{ 76, 2093.005f },
		{ 75, 1975.533f },
		{ 74, 1864.655f },
		{ 73, 1760.000f },
		{ 72, 1661.219f },
		{ 71, 1567.982f },
		{ 70, 1479.978f },
		{ 69, 1396.913f },
		{ 68, 1318.510f },
		{ 67, 1244.508f },
		{ 66, 1174.659f },
		{ 65, 1108.731f },
		{ 64, 1046.502f },
		{ 63, 987.7666f },
		{ 62, 932.3275f },
		{ 61, 880.0000f },
		{ 60, 830.6094f },
		{ 59, 783.9909f },
		{ 58, 739.9888f },
		{ 57, 698.4565f },
		{ 56, 659.2551f },
		{ 55, 622.2540f },
		{ 54, 587.3295f },
		{ 53, 554.3653f },
		{ 52, 523.2511f },
		{ 51, 493.8833f },
		{ 50, 466.1638f },
		{ 49, 440.0000f },
		{ 48, 415.3047f },
		{ 47, 391.9954f },
		{ 46, 369.9944f },
		{ 45, 349.2282f },
		{ 44, 329.6276f },
		{ 43, 311.1270f },
		{ 42, 293.6648f },
		{ 41, 277.1826f },
		{ 40, 261.6256f },
		{ 39, 246.9417f },
		{ 38, 233.0819f },
		{ 37, 220.0000f },
		{ 36, 207.6523f },
		{ 35, 195.9977f },
		{ 34, 184.9972f },
		{ 33, 174.6141f },
		{ 32, 164.8138f },
		{ 31, 155.5635f },
		{ 30, 146.8324f },
		{ 29, 138.5913f },
		{ 28, 130.8128f },
		{ 27, 123.4708f },
		{ 26, 116.5409f },
		{ 25, 110.0000f },
		{ 24, 103.8262f },
		{ 23, 97.99886f },
		{ 22, 92.49861f },
		{ 21, 87.30706f },
		{ 20, 82.40689f },
		{ 19, 77.78175f },
		{ 18, 73.41619f },
		{ 17, 69.29566f },
		{ 16, 65.40639f },
		{ 15, 61.73541f },
		{ 14, 58.27047f },
		{ 13, 55.00000f },
		{ 12, 51.91309f },
		{ 11, 48.99943f },
		{ 10, 46.24930f },
		{ 9, 43.65353f },
		{ 8, 41.20344f },
		{ 7, 38.89087f },
		{ 6, 36.70810f },
		{ 5, 34.64783f },
		{ 4, 32.70320f },
		{ 3, 30.86771f },
		{ 2, 29.13524f },
		{ 1, 27.50000f },
		{ 97, 25.95654f },
		{ 96, 24.49971f },
		{ 95, 23.12465f },
		{ 94, 21.82676f },
		{ 93, 20.60172f },
		{ 92, 19.44544f },
		{ 91, 18.35405f },
		{ 90, 17.32391f },
		{ 89, 16.35160f }
	});
	String names[] = {"C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"};

	// From https://en.wikipedia.org/wiki/Piano_key_frequencies
	float get_frequency_from_key(int key) {
		if (key_map.count(key) == 0)
			return -1;
		return key_map.at(key);
	}

	String get_note_name_from_key(int key) {
		StringBuilder name;
		float freq = get_frequency_from_key(key);
		int h = round(12 * log2(freq / 16.35f)); // 16.35 = C0
		int octave = h / 12;
    	int n = h % 12;

		name << names[n] << octave;
		return name.Build();
	}
}